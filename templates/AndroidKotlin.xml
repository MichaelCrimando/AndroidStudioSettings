<templateSet group="AndroidKotlin">
  <template name="hiltvm" value="@dagger.hilt.android.lifecycle.HiltViewModel&#10;class $NAME$ViewModel @javax.inject.Inject constructor(&#10;&#10;): androidx.lifecycle.ViewModel() {&#10;&#10;    var state by androidx.compose.runtime.mutableStateOf($NAME$State())&#10;        private set&#10;    &#10;    fun onAction(action: $NAME$Action) {&#10;        when(action){&#10;            $END$&#10;        }&#10;    }&#10;}&#10;" description="Create base ViewModel setup" toReformat="false" toShortenFQNames="true">
    <variable name="NAME" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="KOTLIN" value="true" />
      <option name="KOTLIN_COMMENT" value="false" />
    </context>
  </template>
  <template name="compscreen" value="@androidx.compose.runtime.Composable&#10;fun $NAME$ScreenRoot(&#10;    navController: androidx.navigation.NavController,&#10;    viewModel: $VIEWMODEL$ =&#10;        androidx.hilt.navigation.compose.hiltViewModel(),&#10;) {&#10;    $NAME$Screen(&#10;        state = viewModel.state,&#10;        onAction = viewModel::onAction&#10;    )&#10;}&#10;&#10;@androidx.compose.runtime.Composable&#10;private fun $NAME$Screen(&#10;    state: $STATE_CLASS$,&#10;    onAction: ($ACTION_CLASS) -&gt; Unit&#10;) {&#10;    $END$&#10;}&#10;&#10;@androidx.compose.ui.tooling.preview.Preview&#10;@androidx.compose.runtime.Composable&#10;private fun $NAME$ScreenPreview() {&#10;    $THEME$ { //theme&#10;        $NAME$Screen(&#10;            state = $STATE_CLASS$(),&#10;            onAction = {}&#10;        )&#10;    }&#10;}" description="Create @Composable screen" toReformat="false" toShortenFQNames="true">
    <variable name="NAME" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="VIEWMODEL" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="STATE_CLASS" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="THEME" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="KOTLIN" value="true" />
      <option name="KOTLIN_COMMENT" value="false" />
    </context>
  </template>
  <template name="daggermodule" value="@dagger.Module&#10;@dagger.hilt.InstallIn(dagger.hilt.components.SingletonComponent::class)&#10;object $MODULE$Module {&#10;&#10;    @dagger.Provides&#10;    @javax.inject.Singleton&#10;    fun provide$CLASS$($PARAMS$): $Class$ {&#10;        $END$&#10;    }&#10;}" description="Create a DaggerHilt module with provides" toReformat="false" toShortenFQNames="true">
    <variable name="MODULE" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="CLASS" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="PARAMS" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="Class" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="KOTLIN" value="true" />
      <option name="KOTLIN_COMMENT" value="false" />
    </context>
  </template>
</templateSet>